<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

namespace CombinedExpression
{
	public static partial class ExpressionOperators
	{
<#	for (int n=1; n<=8; n++) {																#>
<#		string ps = string.Join(", ", Enumerable.Range(1, n).Select(i => $"T{i}"));			#>
		/// <summary>
		/// Composite function expressions
		/// </summary>
		/// <param name="fs">to be applied first</param>
		/// <param name="g">to be applied second</param>
		public static Expression<Func<<#=ps#>, TResult>> Composite<<#=ps#>, TResult>(this LambdaExpression g, params LambdaExpression[] fs) {
			return (Expression<Func<<#=ps#>, TResult>>)CompositeImpl(g, fs);
		}
<# }																						#>

<#	for (int n=1; n<=8; n++) {																#>
<#		string ps = string.Join(", ", Enumerable.Range(1, n).Select(i => $"T{i}"));			#>
		/// <summary>
		/// Composite function expressions
		/// </summary>
		/// <param name="fs">to be applied first</param>
		/// <param name="g">to be applied second</param>
		public static Expression<Func<<#=ps#>, TResult>> Composite<<#=ps#>, TResult>(this LambdaExpression g, IEnumerable<LambdaExpression> fs) {
			return (Expression<Func<<#=ps#>, TResult>>)CompositeImpl(g, fs);
		}
<# }																						#>

<#	for (int n=1; n<=8; n++) {																#>
<#		string ps = string.Join(", ", Enumerable.Range(1, n).Select(i => $"T{i}"));			#>
		/// <summary>
		/// Composite function expressions
		/// </summary>
		/// <param name="f">to be applied first</param>
		/// <param name="g">to be applied second</param>
		public static Expression<Func<<#=ps#>, TResult>> Then<<#=ps#>, TResult>(this LambdaExpression f, LambdaExpression g) {
			return (Expression<Func<<#=ps#>, TResult>>)Then(f, g);
		}
<# }																						#>
	}
}