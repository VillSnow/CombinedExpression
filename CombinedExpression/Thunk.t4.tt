<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#	int COUNT = 8;																					#>
using System;
using System.Linq.Expressions;

namespace CombinedExpression
{
	public partial class Thunk
	{
<#	for(int n=0; n<=COUNT; ++n){																	#>
<#		string ts = string.Concat(Enumerable.Range(1, n).Select(i => $"T{i}, ")) + "TResult";		#>
		public static Thunk<<#=ts#>> Create<<#=ts#>>(Expression<Func<<#=ts#>>> lambda) => new Thunk<<#=ts#>>(lambda);
<#	}																								#>

<#	for(int n=0; n<=COUNT; ++n){																	#>
<#		string ts = string.Concat(Enumerable.Range(1, n).Select(i => $"T{i}, ")) + "TResult";		#>
		public Func<<#=ts#>> Compile<<#=ts#>>() => ((Expression<Func<<#=ts#>>>)lambda).Compile();
<#	}																								#>

<#	for(int n=0; n<=COUNT; ++n){																	#>
<#		string ts = string.Concat(Enumerable.Range(1, n).Select(i => $"T{i}, ")) + "TResult";		#>
		public Thunk<<#=ts#>> WithParams<<#=ts#>>(Expression<Func<<#=ts#>>> prototype, WithParamsFlag flags = WithParamsFlag.AssertOnly) {
			return new Thunk<<#=ts#>>((Expression<Func<<#=ts#>>>)WithParamsImpl(prototype, flags).lambda);
		}
<#	}																								#>

	}

<#	for(int n=0; n<=COUNT; ++n){																	#>
<#		string ts = string.Concat(Enumerable.Range(1, n).Select(i => $"T{i}, ")) + "TResult";		#>
	public class Thunk<<#=ts#>> : Thunk
	{
		public Thunk(Expression<Func<<#=ts#>>> lambda) : base(lambda) { }
		public new Expression<Func<<#=ts#>>> Expression => (Expression<Func<<#=ts#>>>)base.Expression;
		public Func<<#=ts#>> Compile() => ((Expression<Func<<#=ts#>>>)lambda).Compile();
	}
<#	}																								#>


}